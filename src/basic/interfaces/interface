Interface
---------

- Interface is a way to achieve 100 percent basic.abstraction.
- Interface must be declared with an "interface" keyword.
- All methods in an interface are public and abstract by default.
- Fields in an interface are public, static, and final (constants).
- Interface cannot contain concrete methods.
- We cannot instantiate object of an interface but interface object can take the reference of its implementing class and call its methods or fields.
- An interface can extend another interface but cannot implement another interface.

For Interface Implementing Class:

- A class can implement an interface using "implements" keyword.
- Interface is the blueprint of the behaviour for a class implementing it.
- This means class that implements an interface must implement all the methods declared in the interface.
- A class can implement multiple basic.interfaces.
- Multiple basic.inheritance is not supported in the case of class because of ambiguity.
  However, it is supported in case of an interface because there is no ambiguity.
  It is because its implementation is provided by the implementation class.

GoodToKnow:

- Interfaces cannot have constructors since they cannot be instantiated.
- Since Java 8, we can have default and static methods in an interface. These methods must have body.
- Since Java 8, Implementation class can directly call default method defined in an interface with its object.
- Since Java 8, Implementation class does not have access to static method defined in an interface. You can call static method of interface inside implementation class as <interface_name>.<static_method_name>
- Hence, static methods of an interface cannot be overridden or changed in implementation class.
- We can also have main method inside an interface since java 8, as main method is static.
- Since Java 9, we can have private methods in an interface.

